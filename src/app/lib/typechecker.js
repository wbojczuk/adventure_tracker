"use strict";function typeChecker(e,r){function t(e,r){var t=!0;if(/[a-z]{1,}\s*\|\s*[a-z]{1,}/i.test(r)){for(var a="",n=r.split("|"),i=n.length,o=0;o<i;++o)n[o]=n[o].trim(),c.test(n[o])||(t=!1,l('Bad Type "'.concat(n[o],'"'))),a+=o>0?"|".concat(n[o]):n[o];var s=new RegExp(a,"g");s.test(typeof e)||(t=!1)}else c.test(r)?typeof e!=r.toLowerCase()&&(t=!1):"string"==typeof r&&"any"==r.toLowerCase()||(t=!1,l('Bad Type "'.concat(r,'"')));return t}function a(e,r){void 0===r&&(r=void 0);var s=!0;if(Array.isArray(e)){if(void 0!==r)if(r.length<=1&&Array.isArray(r))for(var c=0===e.length?1:e.length,y=r[0],f=0;f<c;++f)"array"==y||"tuple"==y?a(e[f])||(s=!1):Array.isArray(y)?y.length<=1?a(e[f],y)||(s=!1):i(e[f],y)||(s=!1):"object"==y?n(e[f])||(s=!1):o(y)?n(e[f],y)||(s=!1):t(e[f],y)||(s=!1);else s=!1,l('Bad Template "'.concat(r,'"'))}else s=!1;return s}function n(e,r){void 0===r&&(r=void 0);var s=!0;if(o(e)){if(void 0!==r)if(o(r)){var c=Object.keys(r),f=Object.keys(e),u=c.map(function(e){return y.test(e)?e:e+"?"});if(f.length<=c.length)for(var p in f.forEach(function(e){u.includes(e+"?")||(s=!1)}),r){var g=p;null!=e[p]||y.test(p)?(y.test(p)&&(g=p,p=p.slice(0,-1),null==e[p]&&(e[p]="undefined",r[g]="any")),"array"===r[g]||"tuple"===r[g]?a(e[p])||(s=!1):Array.isArray(r[g])?r[g].length<=1?a(e[p],r[g])||(s=!1):i(e[p],r[g])||(s=!1):"object"==r[g]?n(e[p])||(s=!1):o(r[g])?n(e[p],r[g])||(s=!1):t(e[p],r[g])||(s=!1)):s=!1}else s=!1}else s=!1,l('Bad Template "'.concat(r,'"'))}else s=!1;return s}function i(e,r){void 0===r&&(r=void 0);var s=!0;if(Array.isArray(e))if(void 0!==r&&Array.isArray(r)){var c=!0;if(Array.isArray(e)||(c=!1),c)if(r.length==e.length)for(var y=e.length,f=0;f<y;++f)"array"==r[f]||"tuple"==r[f]?a(e[f])||(s=!1):Array.isArray(r[f])?r[f].length<=1?a(e[f],r[f])||(s=!1):i(e[f],r[f])||(s=!1):"object"==r[f]?n(e[f])||(s=!1):o(r[f])?n(e[f],r[f])||(s=!1):t(e[f],r[f])||(s=!1);else s=!1;else s=!1,l('Bad Template "'.concat(r,'"'))}else s=!1,l("Tuple Type Checks Require A Template");else s=!1;return s}function o(e){return"[object Object]"==Object.prototype.toString.call(e)}function l(e){console.error("TypeCheckerError: ".concat(e))}var s=JSON.parse(JSON.stringify(e)),c=/^(boolean|string|number|undefined)$/i,y=/^\S{1,}\?$/,f=!0;return f="object"===r?n(s):o(r)?Object.keys(r).length>0?n(s,r):n(s):"array"===r?a(s):Array.isArray(r)&&r.length<=1?r.length>0?a(s,r):a(s):"tuple"===r||Array.isArray(r)&&r.length>1?i(s,r):t(s,r),f}export default typeChecker;